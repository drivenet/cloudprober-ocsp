// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ocsp/ocsp.proto

package ocsp

import (
	fmt "fmt"
	proto1 "github.com/cloudprober/cloudprober/probes/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProbeConf struct {
	// Main domain certificate update interval
	CertificateRefreshInterval *int32 `protobuf:"varint,1,opt,name=certificate_refresh_interval,json=certificateRefreshInterval,def=60000" json:"certificate_refresh_interval,omitempty"`
	// Proxy URL, e.g. http://myproxy:3128
	ProxyUrl *string `protobuf:"bytes,2,opt,name=proxy_url,json=proxyUrl" json:"proxy_url,omitempty"`
	// Interval between targets.
	IntervalBetweenTargetsMsec *int32 `protobuf:"varint,98,opt,name=interval_between_targets_msec,json=intervalBetweenTargetsMsec,def=10" json:"interval_between_targets_msec,omitempty"`
	// Requests per probe.
	// Number of OCSP requests per probe. Requests are executed concurrently and
	// each OCSP request contributes to probe results. For example, if you run two
	// requests per probe, "total" counter will be incremented by 2.
	RequestsPerProbe     *int32   `protobuf:"varint,99,opt,name=requests_per_probe,json=requestsPerProbe,def=1" json:"requests_per_probe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbeConf) Reset()         { *m = ProbeConf{} }
func (m *ProbeConf) String() string { return proto.CompactTextString(m) }
func (*ProbeConf) ProtoMessage()    {}
func (*ProbeConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6c5c913ab05ed9e, []int{0}
}
func (m *ProbeConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProbeConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProbeConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProbeConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeConf.Merge(m, src)
}
func (m *ProbeConf) XXX_Size() int {
	return m.Size()
}
func (m *ProbeConf) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeConf.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeConf proto.InternalMessageInfo

const Default_ProbeConf_CertificateRefreshInterval int32 = 60000
const Default_ProbeConf_IntervalBetweenTargetsMsec int32 = 10
const Default_ProbeConf_RequestsPerProbe int32 = 1

func (m *ProbeConf) GetCertificateRefreshInterval() int32 {
	if m != nil && m.CertificateRefreshInterval != nil {
		return *m.CertificateRefreshInterval
	}
	return Default_ProbeConf_CertificateRefreshInterval
}

func (m *ProbeConf) GetProxyUrl() string {
	if m != nil && m.ProxyUrl != nil {
		return *m.ProxyUrl
	}
	return ""
}

func (m *ProbeConf) GetIntervalBetweenTargetsMsec() int32 {
	if m != nil && m.IntervalBetweenTargetsMsec != nil {
		return *m.IntervalBetweenTargetsMsec
	}
	return Default_ProbeConf_IntervalBetweenTargetsMsec
}

func (m *ProbeConf) GetRequestsPerProbe() int32 {
	if m != nil && m.RequestsPerProbe != nil {
		return *m.RequestsPerProbe
	}
	return Default_ProbeConf_RequestsPerProbe
}

var E_OcspProbe = &proto.ExtensionDesc{
	ExtendedType:  (*proto1.ProbeDef)(nil),
	ExtensionType: (*ProbeConf)(nil),
	Field:         200,
	Name:          "ocsp.ocsp_probe",
	Tag:           "bytes,200,opt,name=ocsp_probe",
	Filename:      "ocsp/ocsp.proto",
}

func init() {
	proto.RegisterType((*ProbeConf)(nil), "ocsp.ProbeConf")
	proto.RegisterExtension(E_OcspProbe)
}

func init() { proto.RegisterFile("ocsp/ocsp.proto", fileDescriptor_f6c5c913ab05ed9e) }

var fileDescriptor_f6c5c913ab05ed9e = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0x80, 0x71, 0x45, 0x25, 0x62, 0x86, 0x56, 0x9e, 0xa2, 0x52, 0xa2, 0x8a, 0xa9, 0x53, 0x92,
	0x32, 0x30, 0x54, 0x4c, 0x05, 0x84, 0x18, 0x2a, 0x55, 0x16, 0xcc, 0x56, 0x63, 0x2e, 0x6d, 0xa4,
	0x34, 0x0e, 0x67, 0x87, 0x9f, 0x37, 0xe1, 0x91, 0x3a, 0xf2, 0x08, 0xa8, 0x4c, 0xbc, 0x05, 0xb2,
	0x4d, 0x50, 0x59, 0xec, 0x3b, 0xdf, 0x77, 0x67, 0xdd, 0x47, 0x7b, 0x4a, 0xea, 0x3a, 0xb1, 0x47,
	0x5c, 0xa3, 0x32, 0x8a, 0x1d, 0xda, 0x78, 0x70, 0xb9, 0x2a, 0xcc, 0xba, 0xc9, 0x62, 0xa9, 0x36,
	0x89, 0x2c, 0x55, 0xf3, 0x58, 0xa3, 0xca, 0x00, 0xff, 0xc5, 0xee, 0xd2, 0x89, 0x6b, 0x4b, 0xa4,
	0xaa, 0xf2, 0x62, 0xe5, 0x67, 0x9c, 0x7d, 0x13, 0x1a, 0x2c, 0x6c, 0xf5, 0x4a, 0x55, 0x39, 0xbb,
	0xa5, 0x43, 0x09, 0x68, 0x8a, 0xbc, 0x90, 0x4b, 0x03, 0x02, 0x21, 0x47, 0xd0, 0x6b, 0x51, 0x54,
	0x06, 0xf0, 0x79, 0x59, 0x86, 0x64, 0x44, 0xc6, 0xdd, 0x69, 0xf7, 0x22, 0x4d, 0xd3, 0x94, 0x0f,
	0xf6, 0x50, 0xee, 0xc9, 0xbb, 0x5f, 0x90, 0x9d, 0xd0, 0xa0, 0x46, 0xf5, 0xfa, 0x26, 0x1a, 0x2c,
	0xc3, 0xce, 0x88, 0x8c, 0x03, 0x7e, 0xe4, 0x1e, 0x1e, 0xb0, 0x64, 0x37, 0xf4, 0xb4, 0x9d, 0x28,
	0x32, 0x30, 0x2f, 0x00, 0x95, 0x30, 0x4b, 0x5c, 0x81, 0xd1, 0x62, 0xa3, 0x41, 0x86, 0x99, 0xfb,
	0xa6, 0x33, 0x49, 0xf9, 0xa0, 0x05, 0x67, 0x9e, 0xbb, 0xf7, 0xd8, 0x5c, 0x83, 0x64, 0x09, 0x65,
	0x08, 0x4f, 0x0d, 0x68, 0xa3, 0x45, 0x0d, 0x28, 0xdc, 0x92, 0xa1, 0x74, 0xbd, 0x64, 0xc2, 0xfb,
	0x6d, 0x71, 0x01, 0xe8, 0x36, 0x9c, 0xce, 0x29, 0xb5, 0xc6, 0x3c, 0xc8, 0x86, 0xf1, 0x9e, 0xa1,
	0xd8, 0x1b, 0x8a, 0x1d, 0x78, 0x0d, 0x79, 0xb8, 0xb5, 0xab, 0x1e, 0x9f, 0xf7, 0x62, 0xe7, 0xfb,
	0xcf, 0x10, 0x0f, 0x6c, 0xee, 0xd2, 0x59, 0x7f, 0xbb, 0x8b, 0xc8, 0xc7, 0x2e, 0x22, 0x9f, 0xbb,
	0x88, 0xbc, 0x7f, 0x45, 0x07, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xde, 0xeb, 0xa6, 0x7b, 0xa2,
	0x01, 0x00, 0x00,
}

func (m *ProbeConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProbeConf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProbeConf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RequestsPerProbe != nil {
		i = encodeVarintOcsp(dAtA, i, uint64(*m.RequestsPerProbe))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x98
	}
	if m.IntervalBetweenTargetsMsec != nil {
		i = encodeVarintOcsp(dAtA, i, uint64(*m.IntervalBetweenTargetsMsec))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x90
	}
	if m.ProxyUrl != nil {
		i -= len(*m.ProxyUrl)
		copy(dAtA[i:], *m.ProxyUrl)
		i = encodeVarintOcsp(dAtA, i, uint64(len(*m.ProxyUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.CertificateRefreshInterval != nil {
		i = encodeVarintOcsp(dAtA, i, uint64(*m.CertificateRefreshInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOcsp(dAtA []byte, offset int, v uint64) int {
	offset -= sovOcsp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProbeConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CertificateRefreshInterval != nil {
		n += 1 + sovOcsp(uint64(*m.CertificateRefreshInterval))
	}
	if m.ProxyUrl != nil {
		l = len(*m.ProxyUrl)
		n += 1 + l + sovOcsp(uint64(l))
	}
	if m.IntervalBetweenTargetsMsec != nil {
		n += 2 + sovOcsp(uint64(*m.IntervalBetweenTargetsMsec))
	}
	if m.RequestsPerProbe != nil {
		n += 2 + sovOcsp(uint64(*m.RequestsPerProbe))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOcsp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOcsp(x uint64) (n int) {
	return sovOcsp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProbeConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOcsp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProbeConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProbeConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificateRefreshInterval", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOcsp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CertificateRefreshInterval = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOcsp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOcsp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOcsp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ProxyUrl = &s
			iNdEx = postIndex
		case 98:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalBetweenTargetsMsec", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOcsp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntervalBetweenTargetsMsec = &v
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestsPerProbe", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOcsp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestsPerProbe = &v
		default:
			iNdEx = preIndex
			skippy, err := skipOcsp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOcsp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOcsp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOcsp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOcsp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOcsp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOcsp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOcsp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOcsp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOcsp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOcsp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOcsp = fmt.Errorf("proto: unexpected end of group")
)
