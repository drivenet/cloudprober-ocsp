// This protobuf defines a new cloudprober probe type.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: ocsp/ocsp.proto

package ocsp

import (
	proto "github.com/cloudprober/cloudprober/probes/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProbeConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Main domain certificate update interval
	CertificateRefreshInterval *int32 `protobuf:"varint,1,opt,name=certificate_refresh_interval,json=certificateRefreshInterval,def=60000" json:"certificate_refresh_interval,omitempty"`
	// Proxy URL, e.g. http://myproxy:3128
	ProxyUrl *string `protobuf:"bytes,2,opt,name=proxy_url,json=proxyUrl" json:"proxy_url,omitempty"`
	// Interval between targets.
	IntervalBetweenTargetsMsec *int32 `protobuf:"varint,98,opt,name=interval_between_targets_msec,json=intervalBetweenTargetsMsec,def=10" json:"interval_between_targets_msec,omitempty"`
	// Requests per probe.
	// Number of OCSP requests per probe. Requests are executed concurrently and
	// each OCSP request contributes to probe results. For example, if you run two
	// requests per probe, "total" counter will be incremented by 2.
	RequestsPerProbe *int32 `protobuf:"varint,99,opt,name=requests_per_probe,json=requestsPerProbe,def=1" json:"requests_per_probe,omitempty"`
}

// Default values for ProbeConf fields.
const (
	Default_ProbeConf_CertificateRefreshInterval = int32(60000)
	Default_ProbeConf_IntervalBetweenTargetsMsec = int32(10)
	Default_ProbeConf_RequestsPerProbe           = int32(1)
)

func (x *ProbeConf) Reset() {
	*x = ProbeConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocsp_ocsp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeConf) ProtoMessage() {}

func (x *ProbeConf) ProtoReflect() protoreflect.Message {
	mi := &file_ocsp_ocsp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeConf.ProtoReflect.Descriptor instead.
func (*ProbeConf) Descriptor() ([]byte, []int) {
	return file_ocsp_ocsp_proto_rawDescGZIP(), []int{0}
}

func (x *ProbeConf) GetCertificateRefreshInterval() int32 {
	if x != nil && x.CertificateRefreshInterval != nil {
		return *x.CertificateRefreshInterval
	}
	return Default_ProbeConf_CertificateRefreshInterval
}

func (x *ProbeConf) GetProxyUrl() string {
	if x != nil && x.ProxyUrl != nil {
		return *x.ProxyUrl
	}
	return ""
}

func (x *ProbeConf) GetIntervalBetweenTargetsMsec() int32 {
	if x != nil && x.IntervalBetweenTargetsMsec != nil {
		return *x.IntervalBetweenTargetsMsec
	}
	return Default_ProbeConf_IntervalBetweenTargetsMsec
}

func (x *ProbeConf) GetRequestsPerProbe() int32 {
	if x != nil && x.RequestsPerProbe != nil {
		return *x.RequestsPerProbe
	}
	return Default_ProbeConf_RequestsPerProbe
}

var file_ocsp_ocsp_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*proto.ProbeDef)(nil),
		ExtensionType: (*ProbeConf)(nil),
		Field:         200,
		Name:          "ocsp.ocsp_probe",
		Tag:           "bytes,200,opt,name=ocsp_probe",
		Filename:      "ocsp/ocsp.proto",
	},
}

// Extension fields to proto.ProbeDef.
var (
	// optional ocsp.ProbeConf ocsp_probe = 200;
	E_OcspProbe = &file_ocsp_ocsp_proto_extTypes[0]
)

var File_ocsp_ocsp_proto protoreflect.FileDescriptor

var file_ocsp_ocsp_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6f, 0x63, 0x73, 0x70, 0x2f, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x6f, 0x63, 0x73, 0x70, 0x1a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x12, 0x47, 0x0a, 0x1c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x05, 0x36, 0x30, 0x30, 0x30, 0x30,
	0x52, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x1d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x02, 0x31, 0x30, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x4d, 0x73, 0x65, 0x63,
	0x12, 0x2f, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x3a, 0x4d, 0x0a, 0x0a, 0x6f, 0x63, 0x73, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x12,
	0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x44, 0x65, 0x66, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x09, 0x6f, 0x63, 0x73, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x72, 0x2d, 0x6f, 0x63, 0x73, 0x70, 0x2f, 0x6f, 0x63, 0x73, 0x70,
}

var (
	file_ocsp_ocsp_proto_rawDescOnce sync.Once
	file_ocsp_ocsp_proto_rawDescData = file_ocsp_ocsp_proto_rawDesc
)

func file_ocsp_ocsp_proto_rawDescGZIP() []byte {
	file_ocsp_ocsp_proto_rawDescOnce.Do(func() {
		file_ocsp_ocsp_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocsp_ocsp_proto_rawDescData)
	})
	return file_ocsp_ocsp_proto_rawDescData
}

var file_ocsp_ocsp_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ocsp_ocsp_proto_goTypes = []interface{}{
	(*ProbeConf)(nil),      // 0: ocsp.ProbeConf
	(*proto.ProbeDef)(nil), // 1: cloudprober.probes.ProbeDef
}
var file_ocsp_ocsp_proto_depIdxs = []int32{
	1, // 0: ocsp.ocsp_probe:extendee -> cloudprober.probes.ProbeDef
	0, // 1: ocsp.ocsp_probe:type_name -> ocsp.ProbeConf
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	1, // [1:2] is the sub-list for extension type_name
	0, // [0:1] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ocsp_ocsp_proto_init() }
func file_ocsp_ocsp_proto_init() {
	if File_ocsp_ocsp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocsp_ocsp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocsp_ocsp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_ocsp_ocsp_proto_goTypes,
		DependencyIndexes: file_ocsp_ocsp_proto_depIdxs,
		MessageInfos:      file_ocsp_ocsp_proto_msgTypes,
		ExtensionInfos:    file_ocsp_ocsp_proto_extTypes,
	}.Build()
	File_ocsp_ocsp_proto = out.File
	file_ocsp_ocsp_proto_rawDesc = nil
	file_ocsp_ocsp_proto_goTypes = nil
	file_ocsp_ocsp_proto_depIdxs = nil
}
